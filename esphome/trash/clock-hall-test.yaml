esphome:
  name: clock-hall-test
  friendly_name: Clock Hall

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret _hall_clock_enc_key

ota:
  password: !secret ota_password

wifi:
  ssid: !secret engineer_ssid
  password: !secret engineer_password
  domain: !secret domain
  fast_connect: true

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${hostname}
    password: !secret fallback_password

captive_portal:

globals:
  - id: display_page
    type: int
    restore_value: no
    initial_value: '1'


interval:
- interval: 1s
  id: display_update_interval
  then:
    - lambda: |-
        static int num_executions = 0;
        if(id(display_page) != 1) { 
          if(num_executions++ >= atoi(id(duration).state.c_str())){
            id(display_page)++;
            num_executions = 0;
          }
        } else {
          if (num_executions++ >= atoi(id(duration).state.c_str()) * atoi(id(duration_multiplier).state.c_str())) {
            id(display_page)++;
            num_executions = 0;
          }
        }
        if (id(display_page) >= 6) {
          id(display_page) = 1;
        }

# Example configuration entry
spi:
  clk_pin: 18
  mosi_pin: 23

display:
  - platform: max7219digit
    cs_pin: 5
    num_chips: 4
    intensity: 5
    lambda: !lambda |-
      it.intensity(atoi(id(brightness).state.c_str()));
      if (id(display_page) == 1) {
        it.printf(0, 0, id(pixelmix_bold), "%s ", id(message_text).state.c_str());
      } else if (id(display_page) == 2) {
        it.strftime(0, 1, id(pixelmix_small), "%I:%M:%S", id(hass_time).now());
      } else if (id(display_page) == 3) {
        it.strftime(0, 0, id(pixelmix_bold), "%d %b, %Y ", id(hass_time).now());
      } else if (id(display_page) == 4) {
        it.printf(0, 0, id(pixelmix_bold), "Temp %sÂ°C", id(temperature).state);
      } else if (id(display_page) == 5) {
        it.printf(0, 0, id(pixelmix_bold), "Hum %s%%", id(humidity).state);
      } else if (id(display_page) == 6) {
        it.printf(0, 0, id(pixelmix_bold), "Public IP %s", id(public_ip).state.c_str());
      }

font:
  - file: "../fonts/pixelmix.ttf"
    id: pixelmix
    size: 8

  - file: "../fonts/pixelmix.ttf"
    id: pixelmix_small
    size: 6

  - file: "../fonts/pixelmix_bold.ttf"
    id: pixelmix_bold
    size: 8

time:
  - platform: homeassistant
    id: hass_time

text_sensor:                                    
  - platform: homeassistant
    name: "Message"
    id: message_text
    entity_id: input_text.clock_hall_message
    
  - platform: homeassistant
    name: "Brightness"
    id: brightness
    entity_id: input_number.clock_hall_brightness
    
  - platform: homeassistant
    name: "Page Duration"
    id: duration
    entity_id: input_number.clock_hall_page_duration
    
  - platform: homeassistant
    name: "Message Duration Multiplier"
    id: duration_multiplier
    entity_id: input_number.message_duration_multiplier
    
  - platform: homeassistant
    name: "Public IP"
    id: public_ip
    entity_id: sensor.pujaphone_public_ip_address

sensor:   
  - platform: homeassistant
    name: "Humidity"
    id: humidity
    entity_id: sensor.ble_cypress_humidity_5335445148323233364a303032334201

  - platform: homeassistant
    name: "Temperature"
    id: temperature
    entity_id: sensor.processor_temperature